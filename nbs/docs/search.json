[
  {
    "objectID": "arquitetura.html",
    "href": "arquitetura.html",
    "title": "anateldb",
    "section": "",
    "text": "Links\n\nSpectrum-E Público ( Mosaico )\n\nListas\nDicionários\nSQL Queries ANATELBDRO05\n\n\n\n\n\nBase Anatel read_base\n\nread_mosaico\nread_stel\nread_radcom\n\nBase Aeronáutica read_aero\n\nread_icao\nread_aisw\nread_aisg\n\n\n\n\n\n\nBase Anatel update_base\n\nupdate_mosaico\nupdate_stel\nupdate_radcom\n\nBase Aeronáutica: NotImplemented\n\n\n\n\n```js\nconsole.log('code block');\n```\n\nKatex\n\n\\(x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\)\nMore Katex Examples\n\nNow we can wrap very very very very long text based on maxWidth option"
  },
  {
    "objectID": "constants.html#listas",
    "href": "constants.html#listas",
    "title": "Constantes",
    "section": "Listas",
    "text": "Listas"
  },
  {
    "objectID": "constants.html#dicionários",
    "href": "constants.html#dicionários",
    "title": "Constantes",
    "section": "Dicionários",
    "text": "Dicionários"
  },
  {
    "objectID": "constants.html#sql-queries",
    "href": "constants.html#sql-queries",
    "title": "Constantes",
    "section": "SQL QUERIES",
    "text": "SQL QUERIES"
  },
  {
    "objectID": "constants.html#regex",
    "href": "constants.html#regex",
    "title": "Constantes",
    "section": "Regex",
    "text": "Regex"
  },
  {
    "objectID": "format.html",
    "href": "format.html",
    "title": "Formatação",
    "section": "",
    "text": "import sys\nfrom pathlib import Path\n# Insert in Path Project Directory\nsys.path.insert(0, str(Path().cwd().parent))"
  },
  {
    "objectID": "format.html#otimização-dos-tipos-de-dados",
    "href": "format.html#otimização-dos-tipos-de-dados",
    "title": "Formatação",
    "section": "Otimização dos Tipos de dados",
    "text": "Otimização dos Tipos de dados\nA serem criados dataframes, normalmente a tipo de data é aquele com maior resolução possível, nem sempre isso é necessário, os arquivos de espectro mesmo possuem somente uma casa decimal, portanto um float16 já é suficiente para armazená-los. As funções a seguir fazem essa otimização\nCode below borrowed from https://medium.com/bigdatarepublic/advanced-pandas-optimize-speed-and-memory-a654b53be6c2\n\n\n\n\ndf_optimize\n\n df_optimize (df:pandas.core.frame.DataFrame,\n              datetime_features:Iterable[str]=None,\n              exclude:Iterable[str]=None)\n\nOptimize the data types in dataframe to reduce the memory usage\n\n\n\n\n\n\n\noptimize_objects\n\n optimize_objects (df:pandas.core.frame.DataFrame,\n                   datetime_features:Iterable[str]=None,\n                   exclude:Iterable[str]=None)\n\nOptimize the objects in the dataframe to category | string to reduce the memory usage\n\n\n\n\n\n\n\noptimize_ints\n\n optimize_ints (df:pandas.core.frame.DataFrame,\n                exclude:Iterable[str]=None)\n\nOptimize the ints in the dataframe to reduce the memory usage\n\n\n\n\n\n\n\noptimize_floats\n\n optimize_floats (df:pandas.core.frame.DataFrame,\n                  exclude:Iterable[str]=None)\n\nOptimize the floats in the dataframe to reduce the memory usage\n\n\n\n\n\n\n\nformat_types\n\n format_types (df:pandas.core.frame.DataFrame, stem:str=None)\n\nConvert the columns of a dataframe to optimized types\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\nDataFrame\n\nraw DataFrame to format\n\n\nstem\nstr\nNone\nidentifier for format specific conversions\n\n\nReturns\nDataFrame\n\nDataFrame with optimized types"
  },
  {
    "objectID": "index.html#instalação",
    "href": "index.html#instalação",
    "title": "Anatel - Consulta e Processamento do Banco de Dados",
    "section": "Instalação",
    "text": "Instalação\npip install anateldb"
  },
  {
    "objectID": "index.html#como-utilizar",
    "href": "index.html#como-utilizar",
    "title": "Anatel - Consulta e Processamento do Banco de Dados",
    "section": "Como utilizar",
    "text": "Como utilizar\n\nConsulta à base de dados formatada para o AppAnalise de Anatel\nA motivação original para a presente biblioteca foi disponibilizar os dados de diferentes fontes da Anatel - e posteriormente da Aeronáutica - programaticamente, para serem utilizadas pelo AppAnalise na identificação de emissões captadas pelos planos de monitoração e também em fiscalização de campo.\nOs dados no formato atual em excel são disponibilizados na forma de releases neste repositório juntamente com a versão de código https://github.com/ronaldokun/anateldb/releases.\nOs dados em formato otimizado .parquet.gzip são disponibilizados junto ao repositório na pasta dados juntamente com as versões das bases individuais. Futuramente o objetivo é descontinuar a liberação de arquivos em formato excel e disponibilizar apenas os dados em formato otimizado.\n\nimport pandas as pd\nfrom fastcore.xtras import Path\n\npasta = Path.cwd().parent / 'dados'\nanateldb = pd.read_parquet(pasta / 'AnatelDB.parquet.gzip')\n\n\n\nMétodos para baixar ou atualizar os arquivos das bases de dados\nfrom anateldb.query import update_mosaico, update_radcom, update_stel, update_base\nA função seguinte baixa os dados diretamente da interface pública online do Spectrum E\n%%time\nupdate_mosaico(pasta='D:\\OneDrive - ANATEL\\GR01FI3\\BaseDados')\nBaixando as Estações do Mosaico...\nBaixando o Plano Básico das Estações...\nBaixando o Histórico de Atualizações...\nKbô\nWall time: 8.12 s\n%%time\nupdate_radcom('D:\\OneDrive - ANATEL\\GR01FI3\\BaseDados')\nLendo o Banco de Dados de Radcom\nWall time: 1 s\nA função update_stel é bem mais lenta que as demais, dado que o banco de dados do STEL é antigo e abarca todos os registros de outorga de serviços de telecomunicações da ANATEL, com mais de 400.000 registros ativos. Esse banco de dados é atualizado 1 vez ao dia à meia-noite e remete ao estado do dia anterior, portanto não faz sentido atualizá-lo mais de 1 vez por dia.\n%%time\nupdate_stel('D:\\OneDrive - ANATEL\\GR01FI3\\BaseDados')\nA função update_base combina as 3 bases anteriores e uniformiza os campos:\nupdate_base('D:\\OneDrive - ANATEL\\GR01FI3\\BaseDados')\n\n\nMétodos para ler as Bases de Dados\nfrom anateldb.read import read_radcom, read_stel, read_mosaico, read_base\nradcom = read_radcom(pasta='D:\\OneDrive - ANATEL\\GR01FI3\\BaseDados') ; radcom.head()\n\n\n\n\n\n\n\n\n\nFrequência\n\n\nUnidade\n\n\nLatitude\n\n\nLongitude\n\n\nFase\n\n\nSituação\n\n\nNumero da Estação\n\n\nCNPJ\n\n\nFistel\n\n\nEntidade\n\n\nMunicípio\n\n\nUF\n\n\n\n\n\n\n0\n\n\n104.9\n\n\nMHz\n\n\n-24.861389\n\n\n-54.334722\n\n\n3\n\n\nA\n\n\n641168764\n\n\n00104477000117\n\n\n50011685115\n\n\nACADEMIA CULTURAL DE SANTA HELENA - ACULT - ST…\n\n\nSanta Helena\n\n\nPR\n\n\n\n\n1\n\n\n87.9\n\n\nMHz\n\n\n-7.074444\n\n\n-36.731111\n\n\n3\n\n\nM\n\n\n682699349\n\n\n00284576000128\n\n\n50012524409\n\n\nASSOCIACAO DOS MORADORES E PRODUT. RURAIS DE A…\n\n\nAssunção\n\n\nPB\n\n\n\n\n2\n\n\n87.9\n\n\nMHz\n\n\n-20.323611\n\n\n-44.246944\n\n\n3\n\n\nH\n\n\n659028590\n\n\n00575697000129\n\n\n50011824689\n\n\nASSOCIACAO BONFIM ESPERANCA- ABESPE\n\n\nBonfim\n\n\nMG\n\n\n\n\n3\n\n\n104.9\n\n\nMHz\n\n\n-18.843611\n\n\n-46.792778\n\n\n3\n\n\nB\n\n\n631410937\n\n\n00792795000118\n\n\n50011398132\n\n\nASSOCIACAO DOS TRABALHADORES DE GUIMARANIA (ATG)\n\n\nGuimarânia\n\n\nMG\n\n\n\n\n4\n\n\n87.9\n\n\nMHz\n\n\n-19.466667\n\n\n-45.600000\n\n\n3\n\n\nM\n\n\n631412301\n\n\n00794510000188\n\n\n50011398990\n\n\nFUNDACAO ASSISTENCIAL LAR DA PAZ - FALP\n\n\nDores do Indaiá\n\n\nMG\n\n\n\n\n\n\nSe o argumento update=True for fornecido ou arquivo local não existir, a base de dados é atualizada por meio da função update_radcom.\n\nA função update_radcom somente irá funcionar caso o PC estiver plugado na rede interna cabeada da Anatel.\n\nradcom = read_radcom(pasta='D:\\OneDrive - ANATEL\\GR01FI3\\BaseDados', update=True) ; radcom.tail()\nLendo o Banco de Dados de Radcom\n\n\n\n\n\n\n\n\n\nFrequência\n\n\nUnidade\n\n\nLatitude\n\n\nLongitude\n\n\nFase\n\n\nSituação\n\n\nNumero da Estação\n\n\nCNPJ\n\n\nFistel\n\n\nEntidade\n\n\nMunicípio\n\n\nUF\n\n\n\n\n\n\n4639\n\n\n87.9\n\n\nMHz\n\n\n-10.311667\n\n\n-48.162222\n\n\n1\n\n\nK\n\n\n1011036964\n\n\n08931976000190\n\n\n50411347829\n\n\nASSOCIACAO AMIGOS DA CULTURA E DO MEIO AMBIENT…\n\n\nPalmas\n\n\nTO\n\n\n\n\n4640\n\n\n104.9\n\n\nMHz\n\n\n-10.005000\n\n\n-48.988889\n\n\n1\n\n\nA\n\n\n1011037472\n\n\n19001721000144\n\n\n50416345301\n\n\nASSOCIACAO RADIO COMUNITARIA MONTE SANTO FM\n\n\nMonte Santo do Tocantins\n\n\nTO\n\n\n\n\n4641\n\n\n104.9\n\n\nMHz\n\n\n-5.586389\n\n\n-48.061111\n\n\nP\n\n\nM\n\n\n1011044797\n\n\n19332116000156\n\n\n50416480004\n\n\nASSOCIACAO RADIO COMUNITARIA TOP FM\n\n\nAraguatins\n\n\nTO\n\n\n\n\n4642\n\n\n98.3\n\n\nMHz\n\n\n-28.682222\n\n\n-53.610278\n\n\n2\n\n\nK\n\n\n1011044940\n\n\n97538346000180\n\n\n50416390609\n\n\nASSOCIACAO DE RADIODIFUSAO CIDADE DE CRUZ ALTA\n\n\nCruz Alta\n\n\nRS\n\n\n\n\n4643\n\n\n104.9\n\n\nMHz\n\n\n-6.594722\n\n\n-35.055278\n\n\n1\n\n\nK\n\n\n1011110250\n\n\n10877144000184\n\n\n50411382063\n\n\nASSOCIAÇÃO DE DESENVOLVIMENTO CULTURAL DA RÁDI…\n\n\nMataraca\n\n\nPB\n\n\n\n\n\n\nstel = read_stel(pasta='D:\\OneDrive - ANATEL\\GR01FI3\\BaseDados', update=True)\nOs dados do Stel não serão ilustrados aqui por se tratar de dados de telecomunicação privados, os demais dados de radiodifusão são públicos e disponíveis para qualquer interessado consultar\nSe o argumento update=True for fornecido ou arquivo local não existir, a base de dados é atualizada por meio da função update_stel.\n\nA função update_stel somente irá funcionar caso o PC estiver plugado na rede interna cabeada da Anatel.\n\nmosaico = read_mosaico(pasta='D:\\OneDrive - ANATEL\\GR01FI3\\BaseDados') ; mosaico.tail()\nBaixando as Estações do Mosaico...\nBaixando o Plano Básico das Estações...\nBaixando o Histórico de Atualizações...\nKbô\n\n\n\n\n\n\n\n\n\nServiço\n\n\nSituação\n\n\nEntidade\n\n\nFistel\n\n\nCNPJ\n\n\nMunicípio\n\n\nUF\n\n\nId\n\n\nNúmero da Estação\n\n\nClasse\n\n\nFrequência\n\n\nLatitude\n\n\nLongitude\n\n\nNum_Ato\n\n\nÓrgao\n\n\nData_Ato\n\n\n\n\n\n\n21146\n\n\nRTVD\n\n\nTV-C2\n\n\nM. V. L - COMMUNICARE TELECOMUNICACOES LTDA\n\n\n50419656170\n\n\n12071310000186\n\n\nParauapebas\n\n\nPA\n\n\n5f2068e65ace5\n\n\n\n\nC\n\n\n503\n\n\n-6,0678\n\n\n-49,9037\n\n\n7588\n\n\nORLE\n\n\n2020-12-10 18:21:09\n\n\n\n\n21147\n\n\nRTVD\n\n\nTV-C1\n\n\nMERCES COMUNICACOES LTDA\n\n\n50419663118\n\n\n11322505000199\n\n\nDelmiro Gouveia\n\n\nAL\n\n\n5f218fcfb0d84\n\n\n\n\nC\n\n\n545\n\n\n-9,3853\n\n\n-37,9987\n\n\n9430\n\n\nORLE\n\n\n2017-06-09 00:00:00\n\n\n\n\n21148\n\n\nRTVD\n\n\nTV-C1\n\n\nFUNDACAO EDUCACIONAL E CULTURAL DE IPANEMA\n\n\n50433856696\n\n\n04608796000110\n\n\nSabará\n\n\nMG\n\n\n5f32c1c918e6b\n\n\n\n\nC\n\n\n207\n\n\n-19,89667\n\n\n-43,80722\n\n\n3301\n\n\nORLE\n\n\n2020-06-23 00:00:00\n\n\n\n\n21149\n\n\nFM\n\n\nFM-C2\n\n\nRADIO ITAPIRANGA LTDA\n\n\n50433860456\n\n\n84375872000124\n\n\nItapiranga\n\n\nSC\n\n\n5f68d432841a5\n\n\n\n\nB1\n\n\n105,1\n\n\n-27,15778\n\n\n-53,69583\n\n\n567\n\n\nORLE\n\n\n2021-01-26 17:20:30\n\n\n\n\n21150\n\n\nFM\n\n\nFM-C1\n\n\nEMISSORAS SUL BRASILEIRAS LTDA\n\n\n50433937009\n\n\n95818506000119\n\n\nHorizontina\n\n\nRS\n\n\n5f8dcc96f23f9\n\n\n\n\nB1\n\n\n100,3\n\n\n-27,62833\n\n\n-54,30528\n\n\n3166\n\n\nORLE\n\n\n2020-06-13 00:00:00\n\n\n\n\n\n\nSe o argumento update=True for fornecido ou o arquivo local não existir, a base de dados é atualizada por meio da função update_mosaico.\n\nA função update_mosaico usa a base de dados Pública do Spectrum E, portanto basta somente estar conectado na internet 😎.\n\nA função update_base combina as 3 atualizações de base anteriormente descritas."
  },
  {
    "objectID": "main.html",
    "href": "main.html",
    "title": "Principal",
    "section": "",
    "text": "bump_version\n\n bump_version (version, part=2)\n\n\n\n\n\n\n\n\nget_db\n\n get_db (path:str<Pastaondesalvarosarquivos>,\n         up_base:<AtualizarasbasesdaAnatel>=False,\n         up_icao:<AtualizarabasedoICAO>=False,\n         up_pmec:<AtualizarabasedoPMEC>=False,\n         up_geo:<AtualizarabasedoGeo>=False)\n\n\n\n\n\n\n\n\nget_modtimes\n\n get_modtimes (pasta)\n\nRetorna a data de modificação dos arquivos de dados\n\n\n\n\npasta = Path.cwd().parent / 'dados'\n\n\nanateldb = get_db(pasta)\n\n📜Lendo as bases de dados da Anatel...\n\n\n\nTypeError: read_aero() takes from 1 to 2 positional arguments but 4 were given\n\n\n\nanateldb.sample(20).iloc[:, :4]\n\n\n\n\n\n  \n    \n      \n      Frequency\n      Latitude\n      Longitude\n      Description\n    \n  \n  \n    \n      295219\n      167.70625\n      -19.629036\n      -43.893429\n      [STEL] L, ML, Policia Militar Do Estado De Min...\n    \n    \n      644938\n      466.86250\n      -23.617722\n      -46.732777\n      [STEL] L, NI, Departamento De Policia Federal ...\n    \n    \n      185038\n      161.07000\n      -14.187233\n      -39.723415\n      [STEL] L, ML, Atlantic Nickel Mineração Ltda (...\n    \n    \n      371151\n      167.98125\n      -16.705013\n      -43.819244\n      [STEL] L, FX, Policia Militar Do Estado De Min...\n    \n    \n      807364\n      11525.00000\n      -22.792933\n      -43.407776\n      [STEL] L, FX, Telefonica Brasil S.A. (50403984...\n    \n    \n      53085\n      148.69000\n      -21.857222\n      -54.032776\n      [STEL] L, ML, Usina Eldorado S/A (50013752405,...\n    \n    \n      225070\n      163.43125\n      -23.943806\n      -46.316139\n      [STEL] L, XR, Elevacoes Portuarias S.A. (50415...\n    \n    \n      580857\n      393.37500\n      -22.725164\n      -48.174042\n      [STEL] L, XR, Universidade De Sao Paulo (50413...\n    \n    \n      130223\n      157.63125\n      -22.483473\n      -43.840363\n      [STEL] L, FX, Mrs Logistica S/A (50001253638, ...\n    \n    \n      225971\n      163.58125\n      -18.707195\n      -42.490829\n      [STEL] L, BR, Celulose Nipo Brasileira S.A - C...\n    \n    \n      1240\n      0.21850\n      -22.966667\n      -43.233334\n      [STEL] L, OP, Light Servicos De Eletricidade S...\n    \n    \n      425175\n      168.16875\n      -19.923626\n      -43.920380\n      [STEL] L, FX, Policia Militar Do Estado De Min...\n    \n    \n      866503\n      19480.00000\n      -22.981770\n      -46.819321\n      [STEL] L, FX, Claro S.A. (50001392751, 6882095...\n    \n    \n      318110\n      167.79000\n      -19.797194\n      -43.913223\n      [STEL] L, FX, Companhia De Saneamento De Minas...\n    \n    \n      320764\n      167.79375\n      -19.911144\n      -43.894615\n      [STEL] L, FX, Policia Militar Do Estado De Min...\n    \n    \n      668029\n      539.00000\n      -6.374170\n      -44.362499\n      [MOS] TV-C1, C, Empresa Brasil De Comunicacao ...\n    \n    \n      834651\n      17728.00000\n      -26.965166\n      -48.634056\n      [STEL] L, FX, Tim S A (50417425295, 1005351608...\n    \n    \n      251637\n      166.53000\n      -28.268055\n      -52.403610\n      [STEL] L, FB, Rio Grande Do Sul Policia Civil ...\n    \n    \n      858984\n      19343.00000\n      -2.552267\n      -44.187881\n      [STEL] L, FX, Sky Servicos De Banda Larga Ltda...\n    \n    \n      540489\n      201.00000\n      -5.837222\n      -43.833611\n      [MOS] TV-C7, C, Prefeitura Municipal De Buriti...\n    \n  \n\n\n\n\n\nanateldb = pd.read_parquet(pasta / 'AnatelDB.parquet.gzip')\n\n\n# from pandas_profiling import ProfileReport\n# anateldb['Frequency'] = anateldb['Frequency'].astype('category')\n# profile = ProfileReport(anateldb, config_file='report_config.yaml')\n# profile.to_notebook_iframe()"
  },
  {
    "objectID": "merging.html",
    "href": "merging.html",
    "title": "Mesclagem",
    "section": "",
    "text": "aero_common\n\n aero_common (dfa, dfb, dfc)\n\n\n\n\n\n\n\n\naero_new\n\n aero_new (dfa, dfb, dfc, dist=500)\n\n\n\n\n\n\n\n\nmerge_aero\n\n merge_aero (df, common, new)\n\nMescla a base da Anatel com as tabelas retiradas da Aeronáutica\n\n\n\n\n\n\n\nclean_mosaico\n\n clean_mosaico (df, pasta)\n\nClean the merged dataframe with the data from the MOSAICO page"
  },
  {
    "objectID": "reading.html",
    "href": "reading.html",
    "title": "Leitura",
    "section": "",
    "text": "import sys\nfrom fastcore.xtras import Path\n\n# Insert in Path Project Directory\nsys.path.insert(0, str(Path().cwd().parent))"
  },
  {
    "objectID": "reading.html#mosaico",
    "href": "reading.html#mosaico",
    "title": "Leitura",
    "section": "MOSAICO",
    "text": "MOSAICO\n\nO mosaico atualmente é composto por 2 bases complementares originárias de um banco MongoDB: * Estações * Plano Básico\n\n\n\n\n\nread_mosaico\n\n read_mosaico (folder:Union[str,pathlib.Path], update:bool=False)\n\nLê o banco de dados salvo localmente do MOSAICO e opcionalmente o atualiza.\n\n\n\n\nfolder = Path.cwd().parent / 'dados'\n\n\n# from pandas_profiling import ProfileReport\n# mosaico = read_mosaico(folder)\n# mosaico['Frequência'] = mosaico['Frequência'].astype('category')\n# mosaico_profile = ProfileReport(mosaico, config_file='report_config.yaml', title='MOSAICO')\n# mosaico_profile.to_notebook_iframe()"
  },
  {
    "objectID": "reading.html#radcom",
    "href": "reading.html#radcom",
    "title": "Leitura",
    "section": "RADCOM",
    "text": "RADCOM\n\n\n\n\nread_radcom\n\n read_radcom (folder:Union[str,pathlib.Path], update:bool=False)\n\nLê o banco de dados salvo localmente de RADCOM. Opcionalmente o atualiza pelo Banco de Dados ANATELBDRO05 caso update = True ou não exista o arquivo local\n\n\n\n\n# radcom = read_radcom(folder)\n# radcom['Frequência'] = radcom['Frequência'].astype('category')\n# radcom_profile = ProfileReport(radcom, config_file='report_config.yaml', title='RADCOM')\n# radcom_profile.to_notebook_iframe()"
  },
  {
    "objectID": "reading.html#stel",
    "href": "reading.html#stel",
    "title": "Leitura",
    "section": "STEL",
    "text": "STEL\n\n\n\n\nread_stel\n\n read_stel (folder:Union[str,pathlib.Path], update:bool=False)\n\nLê o banco de dados salvo localmente do STEL.\n\n\n\n\n# stel = read_stel(folder)\n# stel['Frequência'] = stel['Frequência'].astype('category')\n# stel_profile = ProfileReport(stel, config_file='report_config.yaml', title='STEL')\n# stel_profile.to_notebook_iframe()"
  },
  {
    "objectID": "reading.html#bases-externas-da-aeronáutica",
    "href": "reading.html#bases-externas-da-aeronáutica",
    "title": "Leitura",
    "section": "Bases Externas da Aeronáutica",
    "text": "Bases Externas da Aeronáutica\n\n\n\n\nread_aero\n\n read_aero (folder:Union[str,pathlib.Path], update:bool=False)\n\nLê os arquivos de dados da aeronáutica e retorna os registros comuns e únicos\n\n\n\n\n\n\n\nread_aisg\n\n read_aisg (folder:Union[str,pathlib.Path], update:bool=False)\n\nFontes da informação: GEOAISWEB, REDEMET, Ofício nº 2/SSARP/14410 e Canalização VOR/ILS/DME.\n\n\n\n\n\n\n\nread_aisw\n\n read_aisw (folder:Union[str,pathlib.Path], update:bool=False)\n\nFontes da informação: AISWEB, REDEMET, Ofício nº 2/SSARP/14410 e Canalização VOR/ILS/DME.\n\n\n\n\n\n\n\nread_icao\n\n read_icao (folder:Union[str,pathlib.Path], update:bool=False)\n\nLê a base de dados do Frequency Finder e Canalização VOR/ILS/DME\n\n\n\n\n# icao = read_icao(folder)\n# icao['Frequency'] = icao['Frequency'].astype('category')\n# icao_profile = ProfileReport(icao, config_file='report_config.yaml', title='ICAO')\n# icao_profile.to_notebook_iframe()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# aisw = read_aisw(folder)\n# aisw['Frequency'] = aisw['Frequency'].astype('category')\n# aisw_profile = ProfileReport(aisw, config_file='report_config.yaml', title='AISWEB')\n# aisw_profile.to_notebook_iframe()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# aisg = read_aisg(folder)\n# aisg['Frequency'] = aisg['Frequency'].astype('category')\n# aisg_profile = ProfileReport(aisg, config_file='report_config.yaml', title='GEOAISWEB')\n# aisg_profile.to_notebook_iframe()"
  },
  {
    "objectID": "reading.html#base-consolidada",
    "href": "reading.html#base-consolidada",
    "title": "Leitura",
    "section": "Base Consolidada",
    "text": "Base Consolidada\n\n\n\n\nread_base\n\n read_base (folder:Union[str,pathlib.Path], update:bool=False)\n\nLê a base de dados e opcionalmente a atualiza antes da leitura\n\n\n\n\n# base = read_base(folder)\n# base['Frequência'] = base['Frequência'].astype('category')\n# base_profile = ProfileReport(base, config_file='report_config.yaml', title='Base Consolidada')\n# base_profile.to_notebook_iframe()"
  },
  {
    "objectID": "updates.html",
    "href": "updates.html",
    "title": "Atualização",
    "section": "",
    "text": "A função a seguir é um wrapper simples que utiliza o pyodbc para se conectar ao banco de dados base da Anatel e retorna o objeto da conexão\n\n\n\n\n\n\n connect_db ()\n\nConecta ao Banco ANATELBDRO05 e retorna o ‘cursor’ (iterador) do Banco\n\n\n\n\ndef test_connection():\n    conn = connect_db()\n    cursor = conn.cursor()\n    for query in (RADCOM,):\n        cursor.execute(query)\n        test_eq(type(cursor.fetchone()), pyodbc.Row)"
  },
  {
    "objectID": "updates.html#atualização-das-bases-de-dados",
    "href": "updates.html#atualização-das-bases-de-dados",
    "title": "Atualização",
    "section": "Atualização das bases de dados",
    "text": "Atualização das bases de dados\nAs bases de dados são atualizadas atráves das funções a seguir, o único argumento passado em todas elas é a pasta na qual os arquivos locais processados serão salvos, os nomes dos arquivos são padronizados e não podem ser editados para que as funções de leitura e processamento recebam somente a pasta na qual esses arquivos foram salvos.\n\n\n\n\nupdate_base\n\n update_base (folder:Union[str,pathlib.Path])\n\nWrapper que atualiza opcionalmente lê e atualiza as três bases indicadas anteriormente, as combina e salva o arquivo consolidado na folder folder\n\n\n\n\n\n\n\nupdate_mosaico\n\n update_mosaico (folder:Union[str,pathlib.Path])\n\nAtualiza a tabela local do Mosaico. É baixado e processado arquivos xml zipados da página pública do Spectrum E\n\n\n\n\n\n\n\nupdate_stel\n\n update_stel (folder:Union[str,pathlib.Path])\n\nAtualiza a tabela local retornada pela query STEL\n\n\n\n\n\n\n\nupdate_radcom\n\n update_radcom (folder:Union[str,pathlib.Path])\n\nAtualiza a tabela local retornada pela query RADCOM\n\n\n\n\nfolder = Path.cwd().parent / 'dados'\n\n\nupdate_base(folder)\n\n\n\n\n[15:47:40] Não foi possível abrir uma conexão com o SQL Server. Esta conexão somente funciona da   2467490977.py:56\n           rede cabeada!                                                                                           \n\n\n\n\n\n\n\n\n\n[15:48:02] Não foi possível abrir uma conexão com o SQL Server. Esta conexão somente funciona da   2467490977.py:39\n           rede cabeada!                                                                                           \n\n\n\n\n\n\n\n\n\n[15:48:23] Não foi possível baixar os dados do Mosaico                                             2467490977.py:76\n\n\n\n\n\n\n\n\n\n\n  \n    \n      \n      Frequência\n      Entidade\n      Fistel\n      Número_Estação\n      Município\n      UF\n      Latitude\n      Longitude\n      CNPJ\n      Classe\n      Num_Serviço\n      Validade_RF\n      Status\n      Fonte\n      Classe_Emissão\n      Largura_Emissão\n      BW(kHz)\n    \n  \n  \n    \n      0\n      0.0280\n      FURNAS CENTRAIS ELETRICAS S A\n      01030052263\n      1557670\n      Nova Iguaçu\n      RJ\n      -22.662778\n      -43.476389\n      23274194000119\n      OP\n      019\n      2033-08-17\n      L\n      STEL\n      J9E\n      8K00\n      8.0\n    \n    \n      1\n      0.0285\n      COMPANHIA DE GERAÇÃO E TRANSMISSÃO DE ENERGIA ...\n      50420217282\n      1494686\n      Joinville\n      SC\n      -26.292500\n      -48.887222\n      02016507000169\n      OP\n      019\n      2025-08-31\n      L\n      STEL\n      R3E\n      2K50\n      2.5\n    \n    \n      2\n      0.0300\n      FURNAS CENTRAIS ELETRICAS S A\n      01030052263\n      1558412\n      Mogi das Cruzes\n      SP\n      -23.710000\n      -46.273333\n      23274194000119\n      OP\n      019\n      2033-08-17\n      L\n      STEL\n      J3E\n      2K00\n      2.0\n    \n    \n      3\n      0.0300\n      FURNAS CENTRAIS ELETRICAS S A\n      01030052263\n      1557823\n      São Paulo\n      SP\n      -23.441667\n      -46.590833\n      23274194000119\n      OP\n      019\n      2033-08-17\n      L\n      STEL\n      J3E\n      1K00\n      1.0\n    \n    \n      4\n      0.0300\n      FURNAS CENTRAIS ELETRICAS S A\n      01030052263\n      859761\n      Rio de Janeiro\n      RJ\n      -22.926667\n      -43.265000\n      23274194000119\n      OP\n      019\n      2033-08-17\n      L\n      STEL\n      J3E\n      500H\n      0.5\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      913955\n      85469.0000\n      TIM S A\n      50417425295\n      1008754061\n      Goiânia\n      GO\n      -16.592700\n      -49.267800\n      02421421000111\n      FX\n      019\n      2032-08-31\n      L\n      STEL\n      Q7W\n      62M5\n      62500.0\n    \n    \n      913956\n      85469.0000\n      TIM S A\n      50417425295\n      1005059940\n      Rio Branco\n      AC\n      -9.937444\n      -67.827750\n      02421421000111\n      FX\n      019\n      2032-08-31\n      L\n      STEL\n      Q7W\n      62M5\n      62500.0\n    \n    \n      913957\n      85469.0000\n      TIM S A\n      50417425295\n      1009131726\n      Caruaru\n      PE\n      -8.266858\n      -36.006025\n      02421421000111\n      FX\n      019\n      2032-08-31\n      L\n      STEL\n      Q7W\n      62M5\n      62500.0\n    \n    \n      913958\n      85469.0000\n      TIM S A\n      50417425295\n      1008775875\n      Fortaleza\n      CE\n      -3.734861\n      -38.462750\n      02421421000111\n      FX\n      019\n      2032-08-31\n      L\n      STEL\n      Q7W\n      62M5\n      62500.0\n    \n    \n      913959\n      85469.0000\n      TIM S A\n      50417425295\n      1009786951\n      Ananindeua\n      PA\n      -1.358931\n      -48.385669\n      02421421000111\n      FX\n      019\n      2032-08-31\n      L\n      STEL\n      Q7W\n      750M\n      750000.0\n    \n  \n\n913960 rows × 17 columns\n\n\n\n\n# from pandas_profiling import ProfileReport\n# pb = _read_plano_basico(folder / 'canais.zip')\n# pb_profile = ProfileReport(pb, config_file='report_config.yaml')\n# pb_profile.to_notebook_iframe()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# es = _read_estações(folder / 'estações.zip')\n# estações_profile = ProfileReport(es, config_file='report_config.yaml')\n# estações_profile.to_notebook_iframe()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom urllib.request import Request, urlopen\nfrom urllib.error import URLError\nreq = Request(ESTACAO)\ntry:\n    response = urlopen(req)\nexcept URLError as e:\n    if hasattr(e, 'reason'):\n        print('We failed to reach a server.')\n        print('Reason: ', e.reason)\n    elif hasattr(e, 'code'):\n        print('The server couldn\\'t fulfill the request.')\n        print('Error code: ', e.code)\nelse:\n    Path.cwd().joinpath('estações.zip').write_bytes(response.read())\n\nWe failed to reach a server.\nReason:  [WinError 10060] Uma tentativa de conexão falhou porque o componente conectado não respondeu\ncorretamente após um período de tempo ou a conexão estabelecida falhou\nporque o host conectado não respondeu"
  }
]