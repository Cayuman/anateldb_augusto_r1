# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/read.ipynb (unless otherwise specified).

__all__ = ['read_mosaico', 'read_stel', 'read_radcom', 'read_icao', 'read_aisw', 'read_aisg', 'read_aero', 'read_base']

# Cell
from typing import Union, Tuple
from pathlib import Path

import pandas as pd
from pyarrow import ArrowInvalid


from .query import update_mosaico, update_stel, update_radcom, update_base
from .merge import aero_common, aero_new


# Cell
def read_mosaico(pasta: Union[str, Path], update: bool=False)->pd.DataFrame:
    """Lê o banco de dados salvo localmente do MOSAICO.
    Opcionalmente o atualiza antes da leitura baixando os diversos arquivos disponíveis na interface web pública"""
    if update:
        update_mosaico(pasta)
    file = Path(f"{pasta}/mosaico.fth")
    try:
        df = pd.read_feather(file)
    except (ArrowInvalid, FileNotFoundError):
        file = Path(f"{pasta}/mosaico.xlsx")
        try:
            df = pd.read_excel(file)
        except FileNotFoundError:
            return read_mosaico(pasta, update=True)
    return df

# Cell
def read_stel(pasta: Union[str, Path], update: bool=False)->pd.DataFrame:
    """Lê o banco de dados salvo localmente do STEL. Opcionalmente o atualiza pelo Banco de Dados ANATELBDRO01 caso `update = True` ou não exista o arquivo local"""
    if update:
        update_stel(pasta)
    file = Path(f"{pasta}/stel.fth")
    try:
        stel = pd.read_feather(file)
    except (ArrowInvalid, FileNotFoundError):
        file = Path(f"{pasta}/stel.xlsx")
        try:
            stel = pd.read_excel(file, engine="openpyxl")
        except FileNotFoundError:
            read_stel(pasta, True)

    return stel


def read_radcom(pasta: Union[str, Path], update: bool=False)->pd.DataFrame:
    """Lê o banco de dados salvo localmente de RADCOM. Opcionalmente o atualiza pelo Banco de Dados ANATELBDRO01 caso `update = True` ou não exista o arquivo local"""
    if update:
        update_radcom(pasta)
    file = Path(f"{pasta}/radcom.fth")
    try:
        radcom = pd.read_feather(file)
    except (ArrowInvalid, FileNotFoundError):
        file = Path(f"{pasta}/radcom.xlsx")
        try:
            radcom = pd.read_excel(file, engine="openpyxl")
        except FileNotFoundError:
            read_radcom(pasta, True)
    return radcom

# Cell
def read_icao(pasta: Union[str, Path], update: bool=False)->pd.DataFrame:
    """Lê a base de dados do Frequency Finder e Canalização VOR/ILS/DME"""
    if update:
        # TODO: atualizar a base de dados do Frequency Finder e Canalização VOR/ILS/DME
        # update_icao(pasta)
        raise NotImplementedError(
            "Atualizar da base de dados do Frequency Finder e Canalização VOR/ILS/DME não implementado"
        )
    file = Path(f"{pasta}/icao.fth")
    try:
        icao = pd.read_feather(file)
    except (ArrowInvalid, FileNotFoundError):
        file = Path(f"{pasta}/icao.xlsx")
        try:
            icao = pd.read_excel(file, sheet_name="DataBase", engine="openpyxl")
        except FileNotFoundError:
            return read_icao(pasta, update=True)
    return icao


def read_aisw(pasta: Union[str, Path], update: bool=False)->pd.DataFrame:
    """Fontes da informação: AISWEB, REDEMET, Ofício nº 2/SSARP/14410 e Canalização VOR/ILS/DME."""
    if update:
        # TODO: Atualizar a base de dados do AISWEB, REDEMET, Ofício nº 2/SSARP/14410 e Canalização VOR/ILS/DME
        # update_pmec(pasta)
        raise NotImplementedError(
            "Atualizar da base de dados do Frequency Finder e Canalização VOR/ILS/DME não implementado"
        )
    file = Path(f"{pasta}/aisw.fth")
    try:
        df = pd.read_feather(file)
    except (ArrowInvalid, FileNotFoundError):
        file = Path(f"{pasta}/aisw.xlsx")
        try:
            df = pd.read_excel(file, sheet_name="DataBase", engine="openpyxl")
        except FileNotFoundError:
            return read_icao(pasta, update=True)
    return df


def read_aisg(pasta: Union[str, Path], update: bool=False)->pd.DataFrame:
    """Fontes da informação: AISWEB, REDEMET, Ofício nº 2/SSARP/14410 e Canalização VOR/ILS/DME."""
    if update:
        # TODO: Atualizar a base de dados do GEOAISWEB
        # update_geo(pasta)
        raise NotImplementedError(
            "Atualizar da base de dados do Frequency Finder e Canalização VOR/ILS/DME não implementado"
        )
    file = Path(f"{pasta}/aisg.fth")
    try:
        df = pd.read_feather(file)
    except (ArrowInvalid, FileNotFoundError):
        file = Path(f"{pasta}/aisg.xlsx")
        try:
            df = pd.read_excel(file, sheet_name="DataBase", engine="openpyxl")
        except FileNotFoundError:
            return read_icao(pasta, update=True)
    return df

def read_aero(pasta: Union[str, Path], up_icao: bool=False, up_aisw: bool=False, up_aisg: bool=False)->Tuple[pd.DataFrame, pd.DataFrame]:
    """Lê os arquivos de dados da aeronáutico e retorna os registros comuns e únicos"""
    icao = read_icao(pasta, up_icao)
    pmec = read_aisw(pasta, up_aisw)
    geo = read_aisg(pasta, up_aisg)
    icao["Description"] = icao.Description.astype("string")
    pmec["Description"] = pmec.Description.astype("string")
    geo["Description"] = geo.Description.astype("string")
    common = aero_common(icao, pmec, geo)
    new = aero_new(icao, pmec, geo)
    return common, new


# Cell
def read_base(pasta: Union[str, Path], update: bool=False)->pd.DataFrame:
    """Lê a base de dados e opcionalmente a atualiza antes da leitura"""
    if update:
        update_base(pasta)
    file = Path(f"{pasta}/base.fth")
    try:
        df = pd.read_feather(file)
    except (ArrowInvalid, FileNotFoundError):
        file = Path(f"{pasta}/base.xlsx")
        try:
            df = pd.read_excel(file, engine="openpyxl")
        except FileNotFoundError:
            df = update_base(pasta, True)
    return df