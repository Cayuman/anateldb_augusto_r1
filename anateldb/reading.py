# AUTOGENERATED! DO NOT EDIT! File to edit: ..\nbs\reading.ipynb.

# %% auto 0
__all__ = ['read_mosaico', 'read_radcom', 'read_stel', 'read_icao', 'read_aisw', 'read_aisg', 'read_aero', 'read_base']

# %% ..\nbs\reading.ipynb 3
from typing import Union, Tuple
from pathlib import Path

import pandas as pd
from pyarrow import ArrowInvalid


from anateldb.queries import (
update_mosaico, update_stel, update_radcom, update_base
)
from .merging import aero_common, aero_new

# %% ..\nbs\reading.ipynb 4
def _read_df(folder: Union[str, Path], stem: str) -> pd.DataFrame:
    """Lê o dataframe formado por folder / stem.[parquet.gzip | fth | xslx]"""
    file = Path(f"{folder}/{stem}.parquet.gzip")
    try:
        df = pd.read_parquet(file)
    except (ArrowInvalid, FileNotFoundError):
        file = Path(f"{folder}/{stem}.fth")
        try:
            df = pd.read_feather(file)
        except (ArrowInvalid, FileNotFoundError):
            file = Path(f"{folder}/{stem}.xlsx")
            try:
                df = pd.read_excel(file, engine="openpyxl", sheet_name="DataBase")
            except Exception as e:
                raise ValueError(f"Error when reading {file}") from e
    return df

# %% ..\nbs\reading.ipynb 6
def read_mosaico(folder: Union[str, Path], update: bool = False) -> pd.DataFrame:
    """Lê o banco de dados salvo localmente do MOSAICO e opcionalmente o atualiza."""
    return update_mosaico(folder) if update else _read_df(folder, "mosaico")

# %% ..\nbs\reading.ipynb 10
def read_radcom(folder: Union[str, Path], update: bool = False) -> pd.DataFrame:
    """Lê o banco de dados salvo localmente de RADCOM. Opcionalmente o atualiza pelo Banco de Dados ANATELBDRO05 caso `update = True` ou não exista o arquivo local"""
    return update_radcom(folder) if update else _read_df(folder, "radcom")

# %% ..\nbs\reading.ipynb 13
def read_stel(folder: Union[str, Path], update: bool = False) -> pd.DataFrame:
    """Lê o banco de dados salvo localmente do STEL. 
       Opcionalmente o atualiza pelo Banco de Dados ANATELBDRO05
      caso `update = True` ou não exista o arquivo local"""
    return update_stel(folder) if update else _read_df(folder, "stel")

# %% ..\nbs\reading.ipynb 16
def read_icao(folder: Union[str, Path], update: bool = False) -> pd.DataFrame:
    """Lê a base de dados do Frequency Finder e Canalização VOR/ILS/DME"""
    if update:
        # TODO: atualizar a base de dados do Frequency Finder e Canalização VOR/ILS/DME
        # update_icao(folder)
        raise NotImplementedError(
            "Atualizar da base de dados do Frequency Finder e Canalização VOR/ILS/DME não implementado"
        )
    return _read_df(folder, "icao")


def read_aisw(folder: Union[str, Path], update: bool = False) -> pd.DataFrame:
    """Fontes da informação: AISWEB, REDEMET, Ofício nº 2/SSARP/14410 e Canalização VOR/ILS/DME."""
    if update:
        # TODO: Atualizar a base de dados do AISWEB, REDEMET, Ofício nº 2/SSARP/14410 e Canalização VOR/ILS/DME
        # update_pmec(folder)
        raise NotImplementedError(
            "Atualizar da base de dados do Frequency Finder e Canalização VOR/ILS/DME não implementado"
        )
    return _read_df(folder, "aisw")


def read_aisg(folder: Union[str, Path], update: bool = False) -> pd.DataFrame:
    """Fontes da informação: GEOAISWEB, REDEMET, Ofício nº 2/SSARP/14410 e Canalização VOR/ILS/DME."""
    if update:
        # TODO: Atualizar a base de dados do GEOAISWEB
        # update_geo(folder)
        raise NotImplementedError(
            "Atualizar da base de dados do Frequency Finder e Canalização VOR/ILS/DME não implementado"
        )
    return _read_df(folder, "aisg")


def read_aero(
    folder: Union[str, Path],
    up_icao: bool = False,
    up_aisw: bool = False,
    up_aisg: bool = False,
) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Lê os arquivos de dados da aeronáutica e retorna os registros comuns e únicos"""
    icao = read_icao(folder, up_icao)
    pmec = read_aisw(folder, up_aisw)
    geo = read_aisg(folder, up_aisg)
    icao["Description"] = icao.Description.astype("string")
    pmec["Description"] = pmec.Description.astype("string")
    geo["Description"] = geo.Description.astype("string")
    common = aero_common(icao, pmec, geo)
    new = aero_new(icao, pmec, geo)
    return common, new

# %% ..\nbs\reading.ipynb 21
def read_base(folder: Union[str, Path], update: bool = False) -> pd.DataFrame:
    """Lê a base de dados e opcionalmente a atualiza antes da leitura"""
    return update_base(folder) if update else _read_df(folder, "base")
