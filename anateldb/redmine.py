# AUTOGENERATED! DO NOT EDIT! File to edit: redmine.ipynb (unless otherwise specified).

__all__ = ['journal2table', 'value_text_string', 'auth_user', 'valida_fiscaliza', 'issue_type', 'issue2users',
           'insp2acao', 'detalhar_inspecao', 'atualiza_fiscaliza', 'relatar_inspecao']

# Cell
import getpass
import re
import logging
from pathlib import Path
from typing import Iterable, Union
from collections import defaultdict
from redminelib import Redmine
import pandas as pd
from fastcore.test import *
from fastcore.basics import partialler, listify
from fastcore.script import Param, call_parse
from .constants import *
from .console import console

# Cell
def journal2table(journal):
    """Recebe a string journal, caso a formatação seja compatível com um csv, retorna este formato como markdown
    Do contrário simplesmente retorna a string inalterada"""
    table = [[r.strip() for r in j.strip().split(',')] for j in journal.split('\n') if j.strip() != '']
    if not len(set([len(t) for t in table])) == 1:
        print('A tabela não possui todas as linhas com o mesmo número de colunas')
        print('As notas serão salvas como texto somente')
        return table
    df = pd.DataFrame(table[1:], columns=table[0])
    return df.to_markdown(index=False, tablefmt='textile')

# Cell
def value_text_string(input_value):
    return '{' + '"valor":"{0}","texto":"{0}"'.format(input_value) + '}'

def auth_user(username, password, teste=True, verify=True):
    url = URLHM if teste else URL
    fiscaliza = Redmine(url, username=username, password=password, requests={'verify': verify})
    fiscaliza.auth()
    return fiscaliza

def valida_fiscaliza(fiscaliza_obj: Redmine)->None:
    if not isinstance(fiscaliza_obj, Redmine):
        raise TypeError(f"O Objeto Fiscaliza deve ser uma instância autenticada "\
        "(logada) da classe Redmine, o typo do objeto fornecido é {type(fiscaliza_obj)}")

def issue_type(fiscaliza, insp):
    if (tipo := fiscaliza.issue.get(insp).tracker['id']) == 1:
        return 'Inspeção'
    elif tipo == 2:
        return 'Ação'
    return 'Desconhecido'


def issue2users(fiscaliza: Redmine, issue: str)-> dict:
    """Recebe objeto Redmine e string issue e retorna um dicionário com os usuários do grupo Inspeção-Execução"""
    valida_fiscaliza(fiscaliza)
    proj = fiscaliza.issue.get(issue).project.name.lower()
    members = fiscaliza.project_membership.filter(project_id=proj)
    id2name = {}
    name2id = {}
    names = []
    for member in members:
        if roles := getattr(member, 'roles', []):
            for role in roles:
                if str(role) == 'Inspeção-Execução':
                    if user := getattr(member, 'user', None):
                        if (id_ := getattr(user, 'id', None)) and (name := getattr(user, 'name', None)):
                            names.append((id_, name))

    names.sort(key=lambda x: x[1])
    id2name = dict(names)
    name2id = {v:k for k,v in id2name.items()}
    return id2name, name2id

def insp2acao(insp: str, fiscaliza: Redmine)->dict:
    """Recebe o objeto `fiscaliza` e a string referente à inspeção `insp` e retorna um dicionário resumo da Ação atrelada à inspeção

    Args:
        redmineObj (Redmine): Objeto Redmine autenticado
        insp (str): string com o número da inspeção

    Returns:
        dict: Dicionário com o id, nome e descrição da Ação associada à inspeção
    >>>fiscaliza = Redmine(URL, username=USR, password=PWD)
       fiscaliza.auth()
       detalhar_inspecao(fiscaliza, '51804')
    {'id': 51803,
    'name': 'ACAO_GR01_2021_0456',
    'description': 'Atendimento à Denúncia AC202010213075425 (6104512)'}
    """
    valida_fiscaliza(fiscaliza)
    issue = fiscaliza.issue.get(insp, include=['relations', 'attachments'])
    if relations := getattr(issue, 'relations', []):
        if relations := getattr(relations, 'values', []):
            relations = relations()
    for relation in relations:
        if (issue_to_id := relation.get('issue_to_id', None)):
            if (issue_to_id := fiscaliza.issue.get(issue_to_id)):
                if 'ACAO' in str(issue_to_id) or ((tracker := getattr(issue_to_id, 'tracker', None)) and (getattr(tracker, 'id', None) == 2)):
                    if (description := getattr(issue_to_id, 'custom_fields', None)) is not None:
                        if description := description.get(ACAO_DESCRIPTION, None):
                            description = getattr(description, 'value', '')
                        else:
                            description = ''
                    else:
                        description = ''
                    return {'id': getattr(issue_to_id, 'id', ''), 'nome': str(issue_to_id), 'descrição': description}
    else:
        return {'id': '', 'nome': '', 'descrição': ''}

def detalhar_inspecao(insp: str, fiscaliza: Redmine=None)->dict:
    """Recebe número da inspeção `insp` e objeto Redmine logado `fiscaliza`
    Retorna um dicionário com a Situação e campos preenchidos da Inspeção"""
    valida_fiscaliza(fiscaliza)
    result = {k:'' for k in FIELDS}
    issue = fiscaliza.issue.get(insp, include=['relations', 'attachments'])
    result.update({k: str(getattr(issue,k, '')) for k in FIELDS})
    if custom_fields := getattr(issue, 'custom_fields', None):
        custom_fields = list(custom_fields)
        for field in custom_fields:
            key = field.id
            if key in CUSTOM_IDS:
                if (value := getattr(field, 'value')):
                    result[ID2FIELD[key]] = value
    return result

# Cell
def atualiza_fiscaliza(insp, fields, fiscaliza, status, notes=None):
    """ Atualiza a Inspeção para a Situação `status` com os dados do dicionário `fields`"""
    assert status in STATUS, f'Digite uma das mudanças de situação válidas: {STATUS.keys()}'
    valida_fiscaliza(fiscaliza)
    issue = fiscaliza.issue.get(insp, include=['relations', 'attachments'])
    issue_status = str(getattr(issue, 'status', ''))
    if issue_status == status:
        logging.info(f"A inspeção atual já está no status desejado: {status}.")
    custom_fields = [fields.get(field, '') for field in STATUS[status]]
    if status in ('Relatando', 'Relatada'):
        start_date = fields.get('Data de início', '')
        due_date = fields.get('Data limite', '')
    else:
        start_date, due_date= None, None
    notes = fields.get('notes') if status == 'Relatada' else None
    return fiscaliza.issue.update(issue.id, status_id=SITUACAO[status], custom_fields=custom_fields, start_date=start_date, due_date=due_date, notes=notes)

# Cell
@call_parse
def relatar_inspecao(login: Param("Login Anatel do Usuário", str),
                     senha: Param("Senha Utilizada nos Sistemas Interativos da Anatel", str),
                     inspecao: Param("Número da Inspeção a ser relatada", str),
                     dados: Param("Dicionário com os Dados a serem relatados", dict)):
    """Relata a inspeção `inspecao` com os dados constantes no dicionário `dados`"""
    fiscaliza = auth_user(login, senha)
    console.print("Usuário Autenticado com Sucesso :thumbs_up:", style="bold green")

    if (tipo := issue_type(fiscaliza, inspecao)) == 'Ação':
        console.print(f':exclamation: O número de inspeção inserido {inspecao} corresponde a uma [bold red]Ação[/bold red] :exclamation:')
        return

    acao = insp2acao(inspecao, fiscaliza)
    console.print(f"Inspeção {inspecao} vinculada à Ação {acao}")

    with console.status("[magenta]Validando o dicionário de dados...", spinner='monkey') as status:
        data_dict = validate_datadict(d, inspecao, fiscaliza)
        console.print("[bold green] Dados Validados com Sucesso :raised_hands:")

    console.rule('Situação atual da Inspeção')
    status_atual = detalhar_inspecao(inspecao, fiscaliza)
    console.print(status_atual)
    antes = status_atual['status']
    lista_status = list(SITUACAO.keys())

    index = lista_status.index(antes)+1
    if index >= len(lista_status):
        index = len(lista_status) - 1

    for status in lista_status[index:]:
        with console.status(f'Atualizando [bold_yellow]{antes}[/bold_yellow] para [bold_green]{status}', spinner='arrow3'):
            atualiza_fiscaliza(inspecao, data_dict, fiscaliza, status)
            console.rule('Sucesso :sparkles:')
        detalhes = detalhar_inspecao(inspecao, fiscaliza)
        console.print(detalhes)

        if antes == 'Em andamento' and status == 'Relatando':
            console.rule('Atenção :exclamation:')
            console.print(f"Assine o Relatório de Monitoramento: {detalhes['Relatório de Monitoramento']} e chame a função novamente :exclamation:")
            break
        antes = status

    if detalhes['status'] == 'Relatada':
        console.print('Inspeção Relatada :sunglasses:')