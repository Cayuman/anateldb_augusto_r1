# AUTOGENERATED! DO NOT EDIT! File to edit: redmine.ipynb (unless otherwise specified).

__all__ = ['URL', 'URLHM', 'URLHM2', 'ACAO_DESCRIPTION', 'ACAO_TRACKER', 'FIELDS', 'CUSTOM_IDS', 'SITUACAO', 'CLASSE',
           'TIPO', 'STATUS', 'SERVICOS', 'DICT_FIELD', 'ID2FIELD', 'FIELD2ID', 'validate_datadict', 'value_text_string',
           'auth_user', 'issue2users', 'issue2users', 'insp2acao', 'detalhar_inspecao', 'rascunho2aguardando',
           'aguardando2andamento', 'andamento2relatando', 'relatando2relatado']

# Cell
import getpass
from pathlib import Path
from typing import TypedDict
from redminelib import Redmine
import pandas as pd

# Cell
URL = 'https://sistemas.anatel.gov.br/fiscaliza/'
URLHM = 'https://sistemashm.anatel.gov.br/fiscaliza'
URLHM2 = 'http://sistemasnethm/fiscaliza'
ACAO_DESCRIPTION = 54
ACAO_TRACKER = 2

# Cell
FIELDS = ['id', 'subject', 'status', 'priority', 'start_date', 'due_date']
CUSTOM_IDS = [89, 2, 22, 25, 26, 595, 156, 157, 158, 159, 31, 57, 69, 70, 91, 92, 93, 94, 170, 171]

SITUACAO ={'Rascunho': 1,
            'Aguardando Execução': 11,
            'Em andamento': 13,
            'Relatando': 14,
            'Relatada': 15,
            'Cancelada': 19}

CLASSE = ('',
          'Tributária',
          'Técnica',
          'Serviço')

TIPO = ('Outorga - Aspectos não Técnicos',
        'Medição de CEMRF (RNI)',
        'Outorga - Aspectos Técnicos',
        'TV Digital',
        'Uso do Espectro - Monitoração',
        'Uso do Espectro - Não Outorgado',
        'Certificação')

STATUS = {'Aguardando Execução': ('Classe da Inspeção', 'Tipo de inspeção', 'Descrição da Inspeção', 'Fiscal responsável ', 'Fiscais '),
          'Em andamento': ('Html', ' Gerar Relatório '),
          'Relatando': ('Frequência inicial', 'Frequência final', 'Unidade da frequência inicial', 'Unidade da frequência final'),
          'Relatada' : ('UF/Município', 'Serviços da Inspeção', 'Qnt. de emissões na faixa', 'Emissões não autorizadas/desc',
                        'Horas de Preparação', 'Horas de Deslocamento', 'Horas de Execução', 'Horas de conclusão', 'Latitude (coordenadas)',
                        'Longitude (coordenadas)', 'Uso de PF', 'Ação de risco à vida criada?', 'Impossibilidade acesso online?')}

SERVICOS = {'230' : '230 - COLETIVO - RADIODIFUSÃO SONORA EM FREQÜÊNCIA MODULADA',
            '231' : '231 - COLETIVO - RADIODIFUSÃO COMUNITÁRIA',
            '507' : '507 - RESTRITO - MÓVEL AERONÁUTICO',
            '019' : '019 - RESTRITO - LIMITADO PRIVADO',
            '800' : '800 - COLETIVO - RETRANSMISSAO DE T.V.',
            '205' : '205 - COLETIVO - RADIODIFUSÃO SONORA EM ONDA MÉDIA',
            '248' : '248 - COLETIVO - RADIODIFUSÃO DE SONS E IMAGENS',
            '167' : '167 - COLETIVO - ESPECIAL DE TELEVISAO POR ASSINATURA',
            '801' : '801 - COLETIVO - RETRANSMISSÃO DE RADIODIFUSÃO DE SONS E IMAGENS - DIGITAL',
            '247' : '247 - COLETIVO - GERADORA DE RADIODIFUSÃO DE SONS E IMAGENS - DIGITAL',
            '035' : '035 - RESTRITO - ESPC. P/FINS CIENTIF.EXPERIMENTAIS',
            '078' : '078 - RESTRITO - SERVIÇO DE RADIOTÁXI PRIVADO',
            '079' : '079 - COLETIVO - SERVIÇO DE RADIOTÁXI ESPECIALIZADO',
            '033' : '033 - COLETIVO - RADIOENLACES ASSOCIADOS AO SERVIÇO DE RÁDIOTAXI',
            '108' : '108 - RESTRITO - SERVIÇO LIMITADO PRIVADO SUBMODALIDADE RADIODETERMINAÇÃO',
            '132' : '108 - RESTRITO - ESPECIAL DE RADIOAUTOCINE',
            '017' : '017 - RESTRITO - LIMITADO ESPECIALIZADO',
            '011' : '011 - RESTRITO - LIMITADO PRIVADO - PRESTAÇÃO A TERCEIROS',
            '124' : '124 - RESTRITO - ESPECIAL DE SUPERVISÃO E CONTROLE/USO PRÓPRIO',
            '125' : '125 - RESTRITO - ESPECIAL DE SUPERVISÃO E CONTROLE/TERCEIROS',
            '604' : '604 - RESTRITO - MÓVEL MARÍTIMO',
            '064' : '064 - COLETIVO - MÓVEL MARÍTIMO ESPECIALIZADO',
            '046' : '046 - COLETIVO - RADIOENLACES ASSOCIADOS AO SCM',
            '053' : '053 - COLETIVO - RADIOENLACES ASSOCIADOS AO SMP',
            '099' : '099 - RESTRITO - SERVIÇO DE RADIAÇÃO RESTRITA',
            '012' : '012 - RESTRITO - RADIOENLACES ASSOCIADOS AO SERVIÇO MÓVEL PRIVADO'}

DICT_FIELD = ['Classe da Inspeção', 'Tipo de inspeção', 'Descrição da Inspeção', 'Fiscal responsável ',
              'Fiscais ', 'Html', ' Gerar Relatório ', 'Frequência inicial', 'Unidade da frequência inicial',
              'Frequência final', 'Unidade da frequência final', 'Data de início', 'Data limite',
              'UF/Município', 'Serviços da Inspeção', 'Emissões não autorizadas/desc', 'Horas de Preparação'
              'Horas de Deslocamento', 'Horas de Execução', 'Horas de conclusão', 'Latitude (coordenadas)' ,
              'Longitude (coordenadas)', 'Uso de PF', 'Ação de risco à vida criada?', 'Impossibilidade acesso online?', 'notes']

ID2FIELD = {
89: 'Classe da Inspeção',
2: 'Tipo de inspeção',
22: 'Descrição da Inspeção',
25: 'Fiscal responsável ',
26: 'Fiscais ',
585: 'Html',
595: 'Relatório de Monitoramento',
588: ' Gerar Relatório ',
156: 'Frequência inicial',
157: 'Unidade da frequência inicial',
158: 'Frequência final',
159: 'Unidade da frequência final',
31: 'UF/Município',
57: 'Serviços da Inspeção',
69: 'Qnt. de emissões na faixa',
70: 'Emissões não autorizadas/desc',
91: 'Horas de Preparação',
92: 'Horas de Deslocamento',
93: 'Horas de Execução',
94: 'Horas de conclusão',
170: 'Latitude (coordenadas)',
171: 'Longitude (coordenadas)',
151: 'Uso de PF',
154: 'Ação de risco à vida criada?',
450: 'Impossibilidade acesso online?'}

FIELD2ID = {'Classe da Inspeção': 89,
 'Tipo de inspeção': 2,
 'Descrição da Inspeção': 22,
 'Fiscal responsável ': 25,
 'Fiscais ': 26,
 'Relatório de Monitoramento': 595,
 ' Gerar Relatório ': 588,
 'Html': 585, #Campo Oculto
 'Frequência inicial': 156,
 'Unidade da frequência inicial': 157,
 'Frequência final': 158,
 'Unidade da frequência final': 159,
 'UF/Município': 31,
 'Serviços da Inspeção': 57,
 'Qnt. de emissões na faixa': 69,
 'Emissões não autorizadas/desc': 70,
 'Horas de Preparação': 91,
 'Horas de Deslocamento': 92,
 'Horas de Execução': 93,
 'Horas de conclusão': 94,
 'Latitude (coordenadas)': 170,
 'Longitude (coordenadas)': 171,
 'Uso de PF': 151,
 'Ação de risco à vida criada?': 154,
 'Impossibilidade acesso online?': 450}

# Cell
def validate_datadict(data_dict: dict)->dict:
    pass

# Cell
def value_text_string(input_value):
    return '{' + '"valor":"{0}","texto":"{0}"'.format(input_value) + '}'

def auth_user(username, password, teste=True):
    url = URLHM if teste else URL
    fiscaliza = Redmine(url, username=username, password=password)
    fiscaliza.auth()
    return fiscaliza

def issue2users(redmineObj: Redmine, issue: str)-> dict:
    """Recebe objeto Redmine e string issue com o número da issue e retorna um dicionário com os usuários do grupo Inspeção-Execução"""
    proj = redmineObj.issue.get(issue).project.name.lower()
    members = redmineObj.project_membership.filter(project_id=proj)
    id2name = {}
    name2id = {}
    names = []
    for member in members:
        if hasattr(member, 'roles'):
            roles = getattr(member, 'roles')
            for role in roles:
                if str(role) == 'Inspeção-Execução':
                    if hasattr(member, 'user'):
                        user = getattr(member, 'user')
                        if hasattr(user, 'id') and hasattr(user, 'name'):
                            names.append((user.id, user.name))

    names.sort(key=lambda x: x[1])
    id2name = dict(names)
    name2id = {v:k for k,v in id2name.items()}
    return id2name, name2id

def issue2users(redmineObj: Redmine, issue: str)-> dict:
    """Recebe objeto Redmine e string issue com o número da issue e retorna um dicionário com os usuários do grupo Inspeção-Execução"""
    proj = redmineObj.issue.get(issue).project.name.lower()
    members = redmineObj.project_membership.filter(project_id=proj)
    id2name = {}
    name2id = {}
    names = []
    for member in members:
        if roles := getattr(member, 'roles', []):
            for role in roles:
                if str(role) == 'Inspeção-Execução':
                    if user := getattr(member, 'user', None):
                        if (id_ := getattr(user, 'id', None)) and (name := getattr(user, 'name', None)):
                            names.append((id_, name))

    names.sort(key=lambda x: x[1])
    id2name = dict(names)
    name2id = {v:k for k,v in id2name.items()}
    return id2name, name2id

def insp2acao(insp: str, fiscaliza: Redmine = None)->dict:
    """Recebe o objeto `fiscaliza` e a string referente à inspeção `insp` e retorna um dicionário resumo da Ação atrelada à inspeção

    Args:
        redmineObj (Redmine): Objeto Redmine autenticado
        insp (str): string com o número da inspeção

    Returns:
        dict: Dicionário com o id, nome e descrição da Ação associada à inspeção
    >>>fiscaliza = Redmine(URL, username=USR, password=PWD)
       fiscaliza.auth()
       detalhar_inspecao(fiscaliza, '51804')
    {'id': 51803,
    'name': 'ACAO_GR01_2021_0456',
    'description': 'Atendimento à Denúncia AC202010213075425 (6104512)'}
    """
    if fiscaliza is None:
        fiscaliza = auth_user()
    issue = fiscaliza.issue.get(insp, include=['relations', 'attachments'])
    if relations := getattr(issue, 'relations', []):
        if relations := getattr(relations, 'values', []):
            relations = relations()
    for relation in relations:
        if (issue_to_id := relation.get('issue_to_id', None)):
            if (issue_to_id := fiscaliza.issue.get(issue_to_id)):
                if 'ACAO' in str(issue_to_id) or ((tracker := getattr(issue_to_id, 'tracker', None)) and (getattr(tracker, 'id', None) == 2)):
                    if (description := getattr(issue_to_id, 'custom_fields', None)) is not None:
                        if description := description.get(ACAO_DESCRIPTION, None):
                            description = getattr(description, 'value', '')
                        else:
                            description = ''
                    else:
                        description = ''
                    return {'id': getattr(issue_to_id, 'id', ''), 'name': str(issue_to_id), 'description': description}
    else:
        return {'id': '', 'name': '', 'description': ''}


def detalhar_inspecao(insp: str, fiscaliza: Redmine=None)->dict:
    if fiscaliza is None:
        fiscaliza = auth_user()
    result = {k:'' for k in FIELDS}
    issue = fiscaliza.issue.get(insp, include=['relations', 'attachments'])
    result.update({k: str(getattr(issue,k, '')) for k in FIELDS})
    if custom_fields := getattr(issue, 'custom_fields', None):
        custom_fields = list(custom_fields)
        for field in custom_fields:
            key = field.id
            if key in CUSTOM_IDS:
                value = getattr(field, 'value', '')
                result[ID2FIELD[key]] = value
    return result

def rascunho2aguardando(insp, fields, fiscaliza=None):
    if fiscaliza is None:
        fiscaliza = auth_user()
    issue = fiscaliza.issue.get(insp, include=['relations', 'attachments'])
    status = str(getattr(issue, 'status', ''))
    if status != 'Rascunho':
        print(f"O Status atual da Inspeção {status} é diferente de 'Rascunho'!!!")
    status = list(STATUS.keys())[0]
    custom_fields = []
    for field in STATUS[status]:
        if not (updated_val := fields.get(field, None)):
                continue
        if field not in ('Fiscal responsável ', 'Fiscais '):
            if field in ('Classe da Inspeção', 'Tipo de inspeção'):
                updated_val = fields.get(field)
                updated_val = value_text_string(updated_val)
            custom_fields.append({'id': FIELD2ID[field], 'value': updated_val})
    issue_id = issue.id
    _, name2id = issue2users(fiscaliza, issue_id)
    if responsavel := fields.get('Fiscal responsável ', None):
        custom_fields.append({'id': FIELD2ID['Fiscal responsável '], 'value': name2id[responsavel]})
    if fiscais := fields.get('Fiscais ', None):
        if type(fiscais) not in (tuple, list):
            fiscais = [fiscais]
        custom_fields.append({'id': FIELD2ID['Fiscais '], 'value': [name2id[f] for f in fiscais]})
    status = SITUACAO[status]
    return fiscaliza.issue.update(issue_id, status_id=status, custom_fields=custom_fields)

def aguardando2andamento(insp, fields, fiscaliza=None):
    if fiscaliza is None:
        fiscaliza = auth_user()
    issue = fiscaliza.issue.get(insp, include=['relations', 'attachments'])
    status = str(getattr(issue, 'status', ''))
    #assert status == 'Aguardando Execução', f"O Status atual da Inspeção {status} é diferente de 'Aguardando Execução'"
    status = list(STATUS.keys())[1]
    custom_fields = []
    relat, gerar = STATUS[status]
    if relatorio := fields.get(relat, None):
        #relatorio = relatorio.encode('unicode_escape').decode() #deals with Windows Paths
        relatorio = Path(relatorio).read_text()
        custom_fields.append({'id': FIELD2ID[relat], 'value': relatorio})
        custom_fields.append({'id': FIELD2ID[gerar], 'value': '1'})
    else:
        custom_fields.append({'id': FIELD2ID[relat], 'value': ''})
        custom_fields.append({'id': FIELD2ID[gerar], 'value': '0'})

    issue_id = issue.id
    status = SITUACAO[status]
    return fiscaliza.issue.update(issue_id, status_id=status, custom_fields=custom_fields)

def andamento2relatando(insp, fields, fiscaliza=None):
    if fiscaliza is None:
        fiscaliza = auth_user()
    issue = fiscaliza.issue.get(insp, include=['relations', 'attachments'])
    status = str(getattr(issue, 'status', ''))
    if status != 'Em andamento':
        print(f"O Status atual da Inspeção {status} é diferente de 'Aguardando Execução'!!!!")
    status = list(STATUS.keys())[2]
    custom_fields = []
    for field in STATUS[status]:
        updated_val = fields.get(field, '')
        custom_fields.append({'id': FIELD2ID[field], 'value': updated_val})
    assert (start_date := fields.get('Data de início', None)), f'O campo "Data de início" não pode ficar vazio!'
    assert (due_date := fields.get('Data limite', None)), f'O campo "Data limite" não poder ficar vazio!'
    issue_id = issue.id
    status = SITUACAO[status]
    return fiscaliza.issue.update(issue_id, start_date=start_date, due_date=due_date, status_id=status, custom_fields=custom_fields)

def relatando2relatado(insp, fields, fiscaliza=None, notes = None):
    if fiscaliza is None:
        fiscaliza = auth_user()
    issue = fiscaliza.issue.get(insp, include=['relations', 'attachments'])
    status = str(getattr(issue, 'status', ''))
    if status != 'Relatando':
        print(f"O Status atual da Inspeção {status} é diferente de 'Relatando'!!!!")
    status = list(STATUS.keys())[3]
    custom_fields = []
    for field in STATUS[status]:
        updated_val = fields.get(field, '')
        if field in ('UF/Município', 'Serviços da Inspeção'):
            if type(updated_val) not in (tuple, list):
                updated_val = [updated_val]
            if field == 'Serviços da Inspeção':
                updated_val = [SERVICOS[val] for val in updated_val]
            updated_val = [value_text_string(val) for val in updated_val]
        custom_fields.append({'id': FIELD2ID[field], 'value': updated_val})
    issue_id = issue.id
    status = SITUACAO[status]
    return fiscaliza.issue.update(issue_id, status_id=status, notes=notes, custom_fields=custom_fields)